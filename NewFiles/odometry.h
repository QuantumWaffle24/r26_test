#ifndef ODOMETRY_H
#define ODOMETRY_H

#include <utility>
#include <vector>

using namespace std;

/* store motion commands
 * angle_deg -> total angle rotated (sum of turn-in-place changes)
 * time_sec  -> total time taken for linear traversal (no turn timing) */
struct MotionCommand {
  double angle_deg;
  double time_sec;
};

class Odometry {
public:
  Odometry(double wheel_radius, double rpm);

  /* Compute odometry commands
   * param: path generated by planner (grid coordinates)
   * ret: total time (s) and total rotation (deg) */
  MotionCommand computeCommands(vector<pair<int, int>> &path);

private:
  double radius;     // wheel radius (m)
  double rpm;        // wheel rpm (constant)
  double linear_vel; // forward speed (m/s), from wheel radius & rpm

  double distance(int x1, int y1, int x2, int y2);  // Euclidean grid distance
  double angle(int x1, int y1, int x2, int y2);     // heading in degrees
};

#endif
